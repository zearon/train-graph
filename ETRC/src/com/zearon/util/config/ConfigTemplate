/**
 * DO NOT MODIFY THIS FILE!
 * 
 * This file is automatically generated by ConfigClassGen.
 * If you want to modify this class, please subclass it 
 * moke modification in the subclass.
 * 
 * @author Jeff Gong
 */
#if ( $packageName )
package $packageName;
#end

import com.zearon.util.config.ConfigBase;

public class $className extends $baseClassName {

	/**
	 * Static property fields declaration
	 */
#foreach ( $item in $properties )
	static final String prop_${item.propertyKeyName} = "${item.propertyName}"; 
#end

	${className}() {
		super();
	}

	/**
	 * Initialization 
	 */
	protected void makeDefault() {
		super.makeDefault();
		
		// set default value of properties
#foreach ( $item in $properties )
		defaultProp.setProperty(prop_${item.propertyKeyName}, "${item.defaultValue}");
#end
	}
	
	@Override
	protected String getAppName() {
		return "${appName}";
	}
	
	@Override
	protected String getConfigFileName() { 
		return "${configFileName}"; 
	}
	
	/**
	 * property getter and setter methods
	 */
	 
#foreach ( $item in $properties )
	/* property getter and setter methods for ${item.propertyKeyName} */
	#if ( ${item.isBooleanType()} )
public Boolean get${item.propertyKeyName}() {
		return afterGet${item.propertyKeyName}(getValue(prop_${item.propertyKeyName}, "false").equalsIgnoreCase("yes"));
	}
	public void set${item.propertyKeyName}(Boolean value) {
		setValue(prop_${item.propertyKeyName}, beforeSet${item.propertyKeyName}(value) ? "yes" : "no");
	}
	#elseif ( ${item.isNumberType()} )
public ${item.valueType.getSimpleName()} get${item.propertyKeyName}() {
		${item.valueType.getSimpleName()} value = 0;
		try {
			value = ${item.parseNumberFuncName}(getValue(prop_${item.propertyKeyName}));
		} catch (Exception e) {}
		return afterGet${item.propertyKeyName}(value);
	}
	public void set${item.propertyKeyName}(${item.valueType.getSimpleName()} value) {
		setValue(prop_${item.propertyKeyName}, beforeSet${item.propertyKeyName}(value) + "");
	}
	#elseif ( ${item.isStringType()} )
public String get${item.propertyKeyName}() {
		return afterGet${item.propertyKeyName}(getValue(prop_${item.propertyKeyName}));
	}
	public void set${item.propertyKeyName}(String value) {
		setValue(prop_${item.propertyKeyName}, beforeSet${item.propertyKeyName}(value));
	}
	#else
	/**
	 * CAN NOT GENERATE GETTER AND SETTER FOR UNSUPPORTED TYPE PROPERTY: ${item.propertyKeyName} : ${item.valueType.getName()}
	 */
	#end
protected ${item.valueType.getSimpleName()} afterGet${item.propertyKeyName}(${item.valueType.getSimpleName()} value) {
		return value;
	}
	protected ${item.valueType.getSimpleName()} beforeSet${item.propertyKeyName}(${item.valueType.getSimpleName()} value) {
		return value;
	}
	
#end
}